#!/usr/bin/env python3
"""
Build script ƒë·ªÉ t·∫°o file executable cho Advanced Text Editor Tool
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# Th√¥ng tin build
APP_NAME = "AdvancedTextEditor"
MAIN_SCRIPT = "advanced_text_editor.py"
BUILD_DIR = "build"
DIST_DIR = "dist"
SPEC_FILE = f"{APP_NAME}.spec"

# C·∫•u h√¨nh PyInstaller
PYINSTALLER_ARGS = [
    "--name", APP_NAME,
    "--onefile",  # T·∫°o file exe ƒë∆°n l·∫ª
    "--windowed",  # Kh√¥ng hi·ªÉn th·ªã console
    "--clean",  # X√≥a cache v√† build c≈©
    "--noconfirm",  # Kh√¥ng h·ªèi confirm khi ghi ƒë√®
    # "--icon", "icon.ico",  # Uncomment n·∫øu c√≥ file icon
    "--add-data", "README.md;.",  # Th√™m README v√†o exe
    "--add-data", "*.md;.",  # Th√™m t·∫•t c·∫£ file .md
    "--exclude-module", "matplotlib",  # Lo·∫°i b·ªè c√°c module kh√¥ng c·∫ßn thi·∫øt
    "--exclude-module", "numpy",
    "--exclude-module", "scipy",
    "--exclude-module", "pandas",
    "--exclude-module", "PIL",
    "--hidden-import", "tkinter.filedialog",  # ƒê·∫£m b·∫£o import tkinter components
    "--hidden-import", "tkinter.messagebox",
    "--hidden-import", "tkinter.scrolledtext",
    "--hidden-import", "chardet",
]

def get_python_executable():
    """L·∫•y ƒë∆∞·ªùng d·∫´n Python executable"""
    # Th·ª≠ t√¨m trong virtual environment tr∆∞·ªõc
    venv_paths = [
        ".venv/Scripts/python.exe",  # Windows venv
        ".venv/bin/python",          # Linux/macOS venv
        "venv/Scripts/python.exe",   # Windows venv (t√™n kh√°c)
        "venv/bin/python",           # Linux/macOS venv (t√™n kh√°c)
    ]
    
    for venv_path in venv_paths:
        if os.path.exists(venv_path):
            return os.path.abspath(venv_path)
    
    # Fallback to system Python
    return sys.executable

def get_pyinstaller_executable():
    """L·∫•y ƒë∆∞·ªùng d·∫´n PyInstaller executable"""
    python_exe = get_python_executable()
    python_dir = os.path.dirname(python_exe)
    
    # Th·ª≠ t√¨m PyInstaller trong c√πng th∆∞ m·ª•c v·ªõi Python
    if sys.platform == "win32":
        pyinstaller_path = os.path.join(python_dir, "pyinstaller.exe")
    else:
        pyinstaller_path = os.path.join(python_dir, "pyinstaller")
    
    if os.path.exists(pyinstaller_path):
        return pyinstaller_path
    
    # Fallback to system PyInstaller
    return "pyinstaller"

def check_requirements():
    """Ki·ªÉm tra c√°c y√™u c·∫ßu c·∫ßn thi·∫øt"""
    print("üîç Ki·ªÉm tra y√™u c·∫ßu...")
    
    # Ki·ªÉm tra Python version
    if sys.version_info < (3, 7):
        print("‚ùå Y√™u c·∫ßu Python 3.7 tr·ªü l√™n")
        return False
    
    python_exe = get_python_executable()
    print(f"‚úÖ Python {sys.version} ({python_exe})")
    
    # Ki·ªÉm tra file ch√≠nh
    if not os.path.exists(MAIN_SCRIPT):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {MAIN_SCRIPT}")
        return False
    print(f"‚úÖ T√¨m th·∫•y {MAIN_SCRIPT}")
    
    # Ki·ªÉm tra PyInstaller
    try:
        pyinstaller_exe = get_pyinstaller_executable()
        result = subprocess.run([pyinstaller_exe, "--version"], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ PyInstaller {result.stdout.strip()} ({pyinstaller_exe})")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå PyInstaller ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("üí° Ch·∫°y: pip install pyinstaller")
        return False
    
    return True

def install_dependencies():
    """C√†i ƒë·∫∑t dependencies"""
    print("\nüì¶ C√†i ƒë·∫∑t dependencies...")
    
    python_exe = get_python_executable()
    
    # C√†i ƒë·∫∑t PyInstaller n·∫øu ch∆∞a c√≥
    try:
        subprocess.run([python_exe, "-m", "pip", "install", "pyinstaller"], check=True)
        print("‚úÖ PyInstaller ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
    except subprocess.CalledProcessError:
        print("‚ùå L·ªói khi c√†i ƒë·∫∑t PyInstaller")
        return False
    
    # C√†i ƒë·∫∑t requirements.txt n·∫øu c√≥
    if os.path.exists("requirements.txt"):
        try:
            subprocess.run([python_exe, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
            print("‚úÖ ƒê√£ c√†i ƒë·∫∑t requirements.txt")
        except subprocess.CalledProcessError:
            print("‚ùå L·ªói khi c√†i ƒë·∫∑t requirements.txt")
            return False
    
    return True

def clean_build_dirs():
    """X√≥a c√°c th∆∞ m·ª•c build c≈©"""
    print("\nüßπ D·ªçn d·∫πp th∆∞ m·ª•c build c≈©...")
    
    dirs_to_clean = [BUILD_DIR, DIST_DIR, "__pycache__"]
    files_to_clean = [SPEC_FILE]
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóëÔ∏è ƒê√£ x√≥a th∆∞ m·ª•c {dir_name}")
    
    for file_name in files_to_clean:
        if os.path.exists(file_name):
            os.remove(file_name)
            print(f"üóëÔ∏è ƒê√£ x√≥a file {file_name}")

def create_icon():
    """T·∫°o icon ƒë∆°n gi·∫£n n·∫øu ch∆∞a c√≥"""
    icon_path = "app_icon.ico"
    if not os.path.exists(icon_path):
        print(f"\nüé® T·∫°o icon m·∫∑c ƒë·ªãnh...")
        # T·∫°o icon ƒë∆°n gi·∫£n b·∫±ng Python (optional)
        # C√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c·∫ßn icon
        print(f"üí° B·∫°n c√≥ th·ªÉ th√™m file {icon_path} ƒë·ªÉ c√≥ icon ƒë·∫πp h∆°n")
        return None
    return icon_path

def build_exe():
    """Build file executable"""
    print(f"\nüî® B·∫Øt ƒë·∫ßu build {APP_NAME}...")
    
    # T·∫°o icon (optional)
    icon_path = create_icon()
    if icon_path:
        PYINSTALLER_ARGS.extend(["--icon", icon_path])
    
    # S·ª≠ d·ª•ng PyInstaller t·ª´ virtual environment n·∫øu c√≥
    pyinstaller_exe = get_pyinstaller_executable()
    
    # Ch·∫°y PyInstaller
    cmd = [pyinstaller_exe] + PYINSTALLER_ARGS + [MAIN_SCRIPT]
    print(f"üìù L·ªánh build: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build th√†nh c√¥ng!")
        if result.stdout:
            print("üìã Output:")
            print(result.stdout[-500:])  # Hi·ªÉn th·ªã 500 k√Ω t·ª± cu·ªëi
        return True
    except subprocess.CalledProcessError as e:
        print("‚ùå L·ªói khi build:")
        if e.stdout:
            print("üìã STDOUT:")
            print(e.stdout[-1000:])  # Hi·ªÉn th·ªã 1000 k√Ω t·ª± cu·ªëi
        if e.stderr:
            print("‚ùå STDERR:")
            print(e.stderr[-1000:])  # Hi·ªÉn th·ªã 1000 k√Ω t·ª± cu·ªëi
        return False

def post_build_tasks():
    """C√°c t√°c v·ª• sau khi build"""
    print("\nüìã Th·ª±c hi·ªán c√°c t√°c v·ª• sau build...")
    
    exe_path = Path(DIST_DIR) / f"{APP_NAME}.exe"
    
    if exe_path.exists():
        # Hi·ªÉn th·ªã th√¥ng tin file exe
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"üìÑ File exe: {exe_path}")
        print(f"üìè Size: {size_mb:.1f} MB")
        
        # Copy c√°c file c·∫ßn thi·∫øt
        docs_to_copy = ["README.md", "DELETE_MULTIPLE_ITEMS.md", "BUILD_GUIDE.md"]
        for doc in docs_to_copy:
            if os.path.exists(doc):
                shutil.copy2(doc, DIST_DIR)
                print(f"üìã ƒê√£ copy {doc}")
        
        # T·∫°o batch file ƒë·ªÉ ch·∫°y exe
        batch_content = f"""@echo off
title {APP_NAME}
echo Starting {APP_NAME}...
"{APP_NAME}.exe"
pause
"""
        batch_path = Path(DIST_DIR) / f"Run_{APP_NAME}.bat"
        with open(batch_path, 'w', encoding='utf-8') as f:
            f.write(batch_content)
        print(f"‚ö° ƒê√£ t·∫°o {batch_path}")
        
        print(f"\nüéâ Build ho√†n th√†nh!")
        print(f"üìÇ Th∆∞ m·ª•c output: {Path(DIST_DIR).absolute()}")
        print(f"üöÄ Ch·∫°y: {exe_path}")
        
        return True
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file exe sau khi build")
        return False

def main():
    """H√†m ch√≠nh"""
    print("=" * 60)
    print("üîß BUILD SCRIPT - Advanced Text Editor Tool")
    print("=" * 60)
    
    # Ki·ªÉm tra y√™u c·∫ßu
    if not check_requirements():
        print("\n‚ùå Ki·ªÉm tra y√™u c·∫ßu th·∫•t b·∫°i")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return False
    
    # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
    response = input("\n‚ùì B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c build? (y/N): ").lower().strip()
    if response not in ['y', 'yes']:
        print("‚èπÔ∏è ƒê√£ h·ªßy build")
        return False
    
    # C√†i ƒë·∫∑t dependencies
    if not install_dependencies():
        print("\n‚ùå C√†i ƒë·∫∑t dependencies th·∫•t b·∫°i")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return False
    
    # D·ªçn d·∫πp
    clean_build_dirs()
    
    # Build
    if not build_exe():
        print("\n‚ùå Build th·∫•t b·∫°i")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return False
    
    # Post-build tasks
    if not post_build_tasks():
        print("\n‚ùå Post-build tasks th·∫•t b·∫°i")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return False
    
    print("\n" + "=" * 60)
    print("üéä BUILD HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
    print("=" * 60)
    
    # H·ªèi c√≥ mu·ªën ch·∫°y th·ª≠ exe kh√¥ng
    response = input("\n‚ùì B·∫°n c√≥ mu·ªën ch·∫°y th·ª≠ file exe? (y/N): ").lower().strip()
    if response in ['y', 'yes']:
        exe_path = Path(DIST_DIR) / f"{APP_NAME}.exe"
        try:
            subprocess.Popen([str(exe_path)])
            print(f"üöÄ ƒê√£ kh·ªüi ch·∫°y {exe_path}")
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·∫°y exe: {e}")
    
    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Build ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")